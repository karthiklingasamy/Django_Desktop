VS Code
--------------------------------------------------------------------------------------------------

Installed Extensiosn

1. liveserver
2. Prettier Code Formatter
3. Bracket Pair Colorizer
4. vscode-icons

Customize the settings.json

{
  "editor.fontSize": 18,
  "editor.tabSize": 2,
  "liveServer.settings.CustomBrowser": "chrome",
  "editor.wordWrap": "bounded",
  "editor.formatOnSave": true,
  "prettier.singleQuote": true,
  "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
  "vsicons.dontShowNewVersionMessage": true,
  "emmet.syntaxProfiles": {
    "javascript": "javascriptreact",
    "vue": "html",
    "twig": "html"
  },
  "liveServer.settings.donotVerifyTags": true,
  "liveServer.settings.donotShowInfoMsg": true,
  "mssql.connections": [
    {
      "server": "192.168.171.40",
      "database": "SIG",
      "authenticationType": "SqlLogin",
      "user": "sigdbadm",
      "password": "",
      "emptyPasswordInput": false,
      "savePassword": true,
      "profileName": "SIG"
    }
  ],
  "workbench.iconTheme": "vscode-icons",
  "editor.formatOnType": true
}



Short Cut

1. Press CTRL+Enter to go to next line from the middle of the tag
2. Press Shift + Alt + Down Arrow to copy the line and past below 
   Note: you can also use li*4
3. Press Alt+Up Arrow/Down Arrow to move the line

Git Hub
----------------------------------------------------------------------------
Step 1: Set the User Name
git config --global user.name "karthik"

Step 2: Set the email
git config --global user.email "karthiklingasamay@gmail.com"

Step 3: To view the list of parameters
git config --list

Step 4: To view only one parameter
git config user.email

Step 5: To see the help file
git help commit

Step 6:(Navigate to Tuna folder)
git init

Step 7:To add all the file to git
git add .

Step 8: To commit 
git commit -m "This is our first commit"

Step 9: To see all the commit log
git log

Step 10: To see only the commit from karthik
git log --author="karthik"

Step 11: Go get git status
git status

Step 12:
git diff

Step 13:
git remote add origin https://github.com/karthiklingasamy/Django.git
git push -u origin master


Django CMD
------------------------------------------------------------------------------------
Step 1: Create venv
python -m venv xxxxxxx(For Example:django_env)

Step 2: To install djang
pip install django

Step 3: To check the django version
python -m django --version

Step 4:Create Project
django-admin

Step 5: Create App
python manage.py startapp blog

Step 6: Create  Template
blog---->templates----->blog------>templates.html

Step 7: Register the app INSTALLED_APPS
INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 7: Disable HttpResponse and Render
        Render function take three arguments(request,template,contex)

Step 8:Create Dummy Database Call
posts = [
    {
        'author': 'CoreyMS',
        'title': 'Blog Past 1',
        'content': 'First Post Content',
        'date_posted': ' Auguset 27, 2018'
    },

    {
        'author': 'Jane Dow',
        'title': 'Blog Past 2',
        'content': 'Second Post Content',
        'date_posted': ' Auguset 28, 2018'
    }
]

Step 9: Template Inheretance 

Step 10: Add Bootstrat starter template

Step 11: Create Static Folde(create Folder:static)(Create Folder:blog)
         blogapp--->static----->blog
		 
Step 12: Create main.css file 
		 blogapp--->static----->blog---->main.css
		 
		 
Step 13: Include main.css file into our base template
{% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <link rel="stylesheet" type="text/css" href="{% static 'blog/main.css' %}"> #---------->Note: The staic statement does is it generate the absolute url of the static folder and main/css

  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
Step 14: Add URL route to link tag
            <a class="nav-item nav-link" href="{% url 'blog-home' %}">Home</a>
            <a class="nav-item nav-link" href="{% url 'blog-about'%}">About</a>
			
			
Step 15: Admin Page: Run  migrations commands this will create auth_user table
			python manage.py makemigrations
			python manage.py migrate
			
Step 16: Create Super User

		 
		 $ python manage.py createsuperuser
			Username (leave blank to use 'lkart'): karthik
			Email address: lkarthik1985@gmail.com
			Password: 
			Password (again):
			Superuser created successfully.
			
Step 17: Load Admin Page
		 http://localhost:8000/admin
		 
		 
Step 18:Create Post Model

Step 19: Run migration commands.  This will create 0001initial.py file in migration folder
			python manage.py makemigrations
			python manage.py migrate
			
			Note: Migrations are so usefull bcz it allow us to make changes to our database even after it's created and has data in that database
			
Step 20: This is optional. If you really want to see the sql statment run the below commands
		$ python manage.py sqlmigrate blog 0001
		
		BEGIN;
		--
		-- Create model Post
		--
		CREATE TABLE "blog_post" (
		"id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, 
		"title" varchar(100) NOT NULL, 
		"content" text NOT NULL, 
		"date_posted" datetime NOT NULL, 
		"author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
		CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
		COMMIT;
		
Step 21: Query Database

	$python manage.py shell
	
In [2]: from blog.models import Post

In [3]: from django.contrib.auth.models import User

In [4]: User.objects.all()
Out[4]: <QuerySet [<User: karthik>, <User: TestUser>]>

In [5]: User.objects.first()
Out[5]: <User: karthik>

In [7]: User.objects.filter(username='CoreyMS')
Out[7]: <QuerySet []>

In [8]: User.objects.filter(username='karthik')
Out[8]: <QuerySet [<User: karthik>]>

In [9]: user=User.objects.filter(username='karthik').first()

In [10]: user
Out[10]: <User: karthik>

In [11]: user.id
Out[11]: 1

In [12]: user.pk
Out[12]: 1

In [13]: user=User.objects.get(id=1)

In [14]: user
Out[14]: <User: karthik>

In [17]: Post.objects.all()
Out[17]: <QuerySet []>

In [17]: Post.objects.all()
Out[17]: <QuerySet []>

In [18]: 
In [18]: post_1=Post(title='Blog 1',content='First Post Content!',author=user)

In [19]: Post.objects.all()
Out[19]: <QuerySet []>

In [20]: post_1.save()

In [21]: Post.objects.all()
Out[21]: <QuerySet [<Post: Post object (1)>]>

	*************************************Start Add the __str__() in Post Model********************
	from django.db import models
	from django.utils import timezone
	from django.contrib.auth.models import User

	# Create your models here.

	class Post(models.Model):
		title = models.CharField(max_length=100)
		content = models.TextField()
		date_posted = models.DateTimeField(default=timezone.now)  #auto_now=True or auto_now_add=True
		author = models.ForeignKey(User, on_delete=models.CASCADE)
  
		def __str__(self):
			return self.title
	********************************End Add the __str__() in Post Model****************************

In [22]: exit()	 

In [1]: from blog.models import Post
In [2]: from django.contrib.auth.models import User

In [4]: Post.objects.all()
Out[4]: <QuerySet [<Post: Blog 1>]>

In [5]: user=User.objects.filter(username='karthik').first()

In [7]: user
Out[7]: <User: karthik>

In [8]: post_2 = Post(title='Blog 2',content='Second Post Content!',author_id=user.id)

In [9]: post_2.save()

In [10]: Post.objects.all()
Out[10]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [11]: post = Post.objects.first()

In [12]: post.content
Out[12]: 'First Post Content!'

In [13]: post.date_posted
Out[13]: datetime.datetime(2020, 6, 11, 2, 56, 37, 48684, tzinfo=<UTC>)

In [14]: post.author
Out[14]: <User: karthik>

In [15]: post.author.email
Out[15]: 'lkarthik1985@gmail.com'

In [16]: user
Out[16]: <User: karthik>

In [17]: user.post_set
Out[17]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0xa7bc58>

In [18]: user.post_set Note: Related model and set (Refer video time 23 min to 26 min for more details)
Out[18]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0xb1eb80>

In [19]: user.post_set.all()
Out[19]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [20]: user.post_set.create(title='Blog 3',content='Third Post Content!')
Out[20]: <Post: Blog 3>


In [23]: Post.objects.all()
Out[23]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>, <Post: Blog 3>]>


Step 22:Import the Post Models into the view and remove the dummy data and set the context dict
		from django.shortcuts import render
		from .models import Post
		# Create your views here.

		def home(request):
			context = {
				'posts': Post.objects.all()
			}
			print('Home Page!')
			return render(request, 'blog/home.html', context)


		def about(request):
		  return render(request, 'blog/about.html', {'title': 'About'})
		  
Step 23: Django template date filer.
	Refer the document: https://docs.djangoproject.com/en/3.0/ref/templates/builtins/
	Note:home.html
	<small class="text-muted">{{ post.date_posted | date:"F d, Y" }}</small>
	
Step 25: Register the Post Model in admin.py
		from django.contrib import admin
		from .models import Post

		# Register your models here.

		admin.site.register(Post)
		
Step 26: Create New App users
		$ python manage.py startapp users
		
Step 27: Register the users app INSTALLED_APPS
INSTALLED_APPS = [
    'blog.apps.BlogConfig',
	'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 28: Import Forms

from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm

# Create your views here.
def register(request):
  form = UserCreationForm()
  return render(request,'users/register.html',{'form':form})
  
Step 29: Create Template folder and Html page
users---->templates----->users------>templates.html

Step 30: Import the users views.py directly into project urls.py and create the url pattern
	Note:
		1. In our blog app we created our own urls module for the blog and could do the samething here. But we are going to hold of that approach now

from django.contrib import admin
from django.urls import path, include
from users import views as user_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/','user_views.register',name='register'),
    path('', include('blog.urls')),
]

Step 31: Create Register Veiw (app:users)

def register(request):

    if request.method == "POST":

        form = UserRegisterForm(request.POST)

        if form.is_valid():
            form.save()
            username = form.cleaned_data.get("username")
            messages.success(request, f"Account created for {username}!")
            return redirect("blog-home")
    else:

        form = UserRegisterForm()
    return render(request, "users/register.html", {"form": form})

Step 32: Create form.py (app:users)
users---->form.py
1. To create email field on login page

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email=forms.EmailField()

    class Meta:
        model = User
        fields = ['username','email','password1','password2']
		
		
		
Stem 33: Install Crispy Forms

pip install django-crispy-forms

Step 34: Register the crispy form app on installed app

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'users.apps.UsersConfig',
    'crispy_forms',*******************************
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 35: By default crispy form use bootstrap 2 if you want to use bootstrap 4 add the below lines in settings.py
settings.py
CRISPY_TEMPLATE_PACK='bootstrap4'

Step 36: users--->template---->user---->register.html
{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}

STep 36: Import auth views. This login and logout views are class based views. The builtin views for loging and logout that django gave us will handle the forms and logic and all of that stuff for us
but its not going to handle the templates which is good. bcz we want to make the temlate anyways to match the look and style of our current web site

from django.contrib import admin
from django.contrib.auth import views as auth_views ******************
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(), name = 'login'),***************
    path('logout/',auth_views.LogoutView.as_view(),name='login'),****************
    path('', include('blog.urls')),
]


Step 37: Access the loging rout and get the template doesnot exist error. 
http://localhost:8000/login/

TemplateDoesNotExist at /login/
Request Method:	GET
Request URL:	http://localhost:8000/login/
Django Version:	3.0.5
Exception Type:	TemplateDoesNotExist
Exception Value:	
registration/login.html
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\template\loader.py in select_template, line 47
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
Server time:	Mon, 15 Jun 2020 03:09:15 +0000


Step 38: To change the default login view ----- auth_views.LoginView.as_view(template_name='users/login.html')
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),***************************
    path('logout/',auth_views.LogoutView.as_view(),name='logout'),
    path('', include('blog.urls')),
]

Step 39: Create Login page

users---->template----->login.html

Note: set the login and logout href tag
Need An Account ? <a class="ml-2" href="{% url  'register' %}">Sign In</a>
Already Have An Account ? <a class="ml-2" href="{% url 'login' %}">Sign In</a>

Step 40: Try to loging with correct user id and password. django throws the below error. bcz its redirecting to login route
http://localhost:8000/accounts/profile/


Page not found (404)
Request Method:	GET
Request URL:	http://localhost:8000/accounts/profile/

Step 41: change the defauly loging redirect
django_projects---->settings.py

STATIC_URL = '/static/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'blog-home'


Step 41: To change the default logout view ----- path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout')
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout'),************************
    path('', include('blog.urls')),
]

Step 42: Create logout page

users---->template----->logout.html

Step 43: visual changes 

base.html

     <!-- Navbar Right Side -->
          <div class="navbar-nav">
            {% if user.is_authenticated %}**************************************************
            <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a>*******************
            {% else %}*********************************************************************
            <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>************************
            <a class="nav-item nav-link" href="{% url 'register' %}">Register</a>******************
            {% endif %}****************************************************************************
          </div>
		  
Step 44:Create the profile view
users---->views.py
def profile(request):
  return render(request,'users/profile.html')
  
  
Step 45: Create profile.html
users--->templates---->usres---->profile.html
{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}
<h1>{{ user.username }}</h1>  **********(Note:That user is not something that we actually have to pass in to the context that is something that is builtin to the django represent the current login user
{% endblock content %}


Step 46: Create url route for profile page
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
     path('profile/', user_views.profile, name = 'profile'),*********************************************
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout'),
    path('', include('blog.urls')),
]


Step 47: Import login_require decoretaor
users--->views.py

from django.shortcuts import render, redirect
#from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from .forms import UserRegisterForm
from django.contrib.auth.decorators import login_required *************

@login_required **********************
def profile(request):
  return render(request,'users/profile.html')


Step 48: Access the profile route

Request :localhost:8000/profile

Response :
http://localhost:8000/accounts/login/?next=/profile/

Page not found (404)
Request Method:	GET
Request URL:	http://localhost:8000/accounts/login/?next=/profile/
Using the URLconf defined in django_project.urls, Django tried these URL patterns, in this order:

admin/
register/ [name='register']
profile/ [name='profile']
login/ [name='login']
logout/ [name='logout']
[name='blog-home']
about/ [name='blog-about']
The current path, accounts/login/, didn't match any of these.

Step 49: go to settings.py
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'blog-home'

LOGIN_URL ='login' **********************


Step 50: Access the profile route

Request:localhost:8000/prfile

Response: http://localhost:8000/login/?next=/profile/ ************
after loging django automatically redirect to profile page. This is the built in feature django remember the url http://localhost:8000/login/?next=/profile/
so the user wont redirect to blog page.













	

		 
