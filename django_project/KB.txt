VS Code
--------------------------------------------------------------------------------------------------

Installed Extensiosn

1. liveserver
2. Prettier Code Formatter
3. Bracket Pair Colorizer
4. vscode-icons

Customize the settings.json

{
  "editor.fontSize": 18,
  "editor.tabSize": 2,
  "liveServer.settings.CustomBrowser": "chrome",
  "editor.wordWrap": "bounded",
  "editor.formatOnSave": true,
  "prettier.singleQuote": true,
  "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
  "vsicons.dontShowNewVersionMessage": true,
  "emmet.syntaxProfiles": {
    "javascript": "javascriptreact",
    "vue": "html",
    "twig": "html"
  },
  "liveServer.settings.donotVerifyTags": true,
  "liveServer.settings.donotShowInfoMsg": true,
  "mssql.connections": [
    {
      "server": "192.168.171.40",
      "database": "SIG",
      "authenticationType": "SqlLogin",
      "user": "sigdbadm",
      "password": "",
      "emptyPasswordInput": false,
      "savePassword": true,
      "profileName": "SIG"
    }
  ],
  "workbench.iconTheme": "vscode-icons",
  "editor.formatOnType": true
}



Short Cut

1. Press CTRL+Enter to go to next line from the middle of the tag
2. Press Shift + Alt + Down Arrow to copy the line and past below 
   Note: you can also use li*4
3. Press Alt+Up Arrow/Down Arrow to move the line

Git Hub
----------------------------------------------------------------------------
Step 1: Set the User Name
git config --global user.name "karthik"

Step 2: Set the email
git config --global user.email "karthiklingasamay@gmail.com"

Step 3: To view the list of parameters
git config --list

Step 4: To view only one parameter
git config user.email

Step 5: To see the help file
git help commit

Step 6:(Navigate to Tuna folder)
git init

Step 7:To add all the file to git
git add .

Step 8: To commit 
git commit -m "This is our first commit"

Step 9: To see all the commit log
git log

Step 10: To see only the commit from karthik
git log --author="karthik"

Step 11: Go get git status
git status

Step 12:
git diff

Step 13:
git remote add origin https://github.com/karthiklingasamy/Django.git
git push -u origin master


Django CMD
------------------------------------------------------------------------------------
Step 1: Create venv
python -m venv xxxxxxx(For Example:django_env)

Step 2: To install djang
pip install django

Step 3: To check the django version
python -m django --version

Step 4:Create Project
django-admin

Step 5: Create App
python manage.py startapp blog

Step 6: Create  Template
blog---->templates----->blog------>templates.html

Step 7: Register the app INSTALLED_APPS
INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 7: Disable HttpResponse and Render
        Render function take three arguments(request,template,contex)

Step 8:Create Dummy Database Call
posts = [
    {
        'author': 'CoreyMS',
        'title': 'Blog Past 1',
        'content': 'First Post Content',
        'date_posted': ' Auguset 27, 2018'
    },

    {
        'author': 'Jane Dow',
        'title': 'Blog Past 2',
        'content': 'Second Post Content',
        'date_posted': ' Auguset 28, 2018'
    }
]

Step 9: Template Inheretance 

Step 10: Add Bootstrat starter template

Step 11: Create Static Folde(create Folder:static)(Create Folder:blog)
         blogapp--->static----->blog
		 
Step 12: Create main.css file 
		 blogapp--->static----->blog---->main.css
		 
		 
Step 13: Include main.css file into our base template
{% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <link rel="stylesheet" type="text/css" href="{% static 'blog/main.css' %}"> #---------->Note: The staic statement does is it generate the absolute url of the static folder and main/css

  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
Step 14: Add URL route to link tag
            <a class="nav-item nav-link" href="{% url 'blog-home' %}">Home</a>
            <a class="nav-item nav-link" href="{% url 'blog-about'%}">About</a>
			
			
Step 15: Admin Page: Run  migrations commands this will create auth_user table
			python manage.py makemigrations
			python manage.py migrate
			
Step 16: Create Super User

		 
		 $ python manage.py createsuperuser
			Username (leave blank to use 'lkart'): karthik
			Email address: lkarthik1985@gmail.com
			Password: 
			Password (again):
			Superuser created successfully.
			
Step 17: Load Admin Page
		 http://localhost:8000/admin
		 
		 
Step 18:Create Post Model

Step 19: Run migration commands.  This will create 0001initial.py file in migration folder
			python manage.py makemigrations
			python manage.py migrate
			
			Note: Migrations are so usefull bcz it allow us to make changes to our database even after it's created and has data in that database
			
Step 20: This is optional. If you really want to see the sql statment run the below commands
		$ python manage.py sqlmigrate blog 0001
		
		BEGIN;
		--
		-- Create model Post
		--
		CREATE TABLE "blog_post" (
		"id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, 
		"title" varchar(100) NOT NULL, 
		"content" text NOT NULL, 
		"date_posted" datetime NOT NULL, 
		"author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
		CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
		COMMIT;
		
Step 21: Query Database

	$python manage.py shell
	
In [2]: from blog.models import Post

In [3]: from django.contrib.auth.models import User

In [4]: User.objects.all()
Out[4]: <QuerySet [<User: karthik>, <User: TestUser>]>

In [5]: User.objects.first()
Out[5]: <User: karthik>

In [7]: User.objects.filter(username='CoreyMS')
Out[7]: <QuerySet []>

In [8]: User.objects.filter(username='karthik')
Out[8]: <QuerySet [<User: karthik>]>

In [9]: user=User.objects.filter(username='karthik').first()

In [10]: user
Out[10]: <User: karthik>

In [11]: user.id
Out[11]: 1

In [12]: user.pk
Out[12]: 1

In [13]: user=User.objects.get(id=1)

In [14]: user
Out[14]: <User: karthik>

In [17]: Post.objects.all()
Out[17]: <QuerySet []>

In [17]: Post.objects.all()
Out[17]: <QuerySet []>

In [18]: 
In [18]: post_1=Post(title='Blog 1',content='First Post Content!',author=user)

In [19]: Post.objects.all()
Out[19]: <QuerySet []>

In [20]: post_1.save()

In [21]: Post.objects.all()
Out[21]: <QuerySet [<Post: Post object (1)>]>

	*************************************Start Add the __str__() in Post Model********************
	from django.db import models
	from django.utils import timezone
	from django.contrib.auth.models import User

	# Create your models here.

	class Post(models.Model):
		title = models.CharField(max_length=100)
		content = models.TextField()
		date_posted = models.DateTimeField(default=timezone.now)  #auto_now=True or auto_now_add=True
		author = models.ForeignKey(User, on_delete=models.CASCADE)
  
		def __str__(self):
			return self.title
	********************************End Add the __str__() in Post Model****************************

In [22]: exit()	 

In [1]: from blog.models import Post
In [2]: from django.contrib.auth.models import User

In [4]: Post.objects.all()
Out[4]: <QuerySet [<Post: Blog 1>]>

In [5]: user=User.objects.filter(username='karthik').first()

In [7]: user
Out[7]: <User: karthik>

In [8]: post_2 = Post(title='Blog 2',content='Second Post Content!',author_id=user.id)

In [9]: post_2.save()

In [10]: Post.objects.all()
Out[10]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [11]: post = Post.objects.first()

In [12]: post.content
Out[12]: 'First Post Content!'

In [13]: post.date_posted
Out[13]: datetime.datetime(2020, 6, 11, 2, 56, 37, 48684, tzinfo=<UTC>)

In [14]: post.author
Out[14]: <User: karthik>

In [15]: post.author.email
Out[15]: 'lkarthik1985@gmail.com'

In [16]: user
Out[16]: <User: karthik>

In [17]: user.post_set
Out[17]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0xa7bc58>

In [18]: user.post_set Note: Related model and set (Refer video time 23 min to 26 min for more details)
Out[18]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0xb1eb80>

In [19]: user.post_set.all()
Out[19]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>

In [20]: user.post_set.create(title='Blog 3',content='Third Post Content!')
Out[20]: <Post: Blog 3>


In [23]: Post.objects.all()
Out[23]: <QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog 3>, <Post: Blog 3>]>


Step 22:Import the Post Models into the view and remove the dummy data and set the context dict
		from django.shortcuts import render
		from .models import Post
		# Create your views here.

		def home(request):
			context = {
				'posts': Post.objects.all()
			}
			print('Home Page!')
			return render(request, 'blog/home.html', context)


		def about(request):
		  return render(request, 'blog/about.html', {'title': 'About'})
		  
Step 23: Django template date filer.
	Refer the document: https://docs.djangoproject.com/en/3.0/ref/templates/builtins/
	Note:home.html
	<small class="text-muted">{{ post.date_posted | date:"F d, Y" }}</small>
	
Step 25: Register the Post Model in admin.py
		from django.contrib import admin
		from .models import Post

		# Register your models here.

		admin.site.register(Post)
		
Step 26: Create New App users
		$ python manage.py startapp users
		
Step 27: Register the users app INSTALLED_APPS
INSTALLED_APPS = [
    'blog.apps.BlogConfig',
	'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 28: Import Forms

from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm

# Create your views here.
def register(request):
  form = UserCreationForm()
  return render(request,'users/register.html',{'form':form})
  
Step 29: Create Template folder and Html page
users---->templates----->users------>templates.html

Step 30: Import the users views.py directly into project urls.py and create the url pattern
	Note:
		1. In our blog app we created our own urls module for the blog and could do the samething here. But we are going to hold of that approach now

from django.contrib import admin
from django.urls import path, include
from users import views as user_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/','user_views.register',name='register'),
    path('', include('blog.urls')),
]

Step 31: Create Register Veiw (app:users)

def register(request):

    if request.method == "POST":

        form = UserRegisterForm(request.POST)

        if form.is_valid():
            form.save()
            username = form.cleaned_data.get("username")
            messages.success(request, f"Account created for {username}!")
            return redirect("blog-home")
    else:

        form = UserRegisterForm()
    return render(request, "users/register.html", {"form": form})

Step 32: Create form.py (app:users)
users---->form.py
1. To create email field on login page

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class UserRegisterForm(UserCreationForm):
    email=forms.EmailField()

    class Meta:
        model = User
        fields = ['username','email','password1','password2']
		
		
		
Stem 33: Install Crispy Forms

pip install django-crispy-forms

Step 34: Register the crispy form app on installed app

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'users.apps.UsersConfig',
    'crispy_forms',*******************************
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 35: By default crispy form use bootstrap 2 if you want to use bootstrap 4 add the below lines in settings.py
settings.py
CRISPY_TEMPLATE_PACK='bootstrap4'

Step 36: users--->template---->user---->register.html
{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}

STep 36: Import auth views. This login and logout views are class based views. The builtin views for loging and logout that django gave us will handle the forms and logic and all of that stuff for us
but its not going to handle the templates which is good. bcz we want to make the temlate anyways to match the look and style of our current web site

from django.contrib import admin
from django.contrib.auth import views as auth_views ******************
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(), name = 'login'),***************
    path('logout/',auth_views.LogoutView.as_view(),name='login'),****************
    path('', include('blog.urls')),
]


Step 37: Access the loging rout and get the template doesnot exist error. 
http://localhost:8000/login/

TemplateDoesNotExist at /login/
Request Method:	GET
Request URL:	http://localhost:8000/login/
Django Version:	3.0.5
Exception Type:	TemplateDoesNotExist *********************************
Exception Value:	
registration/login.html *************************************************************
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\template\loader.py in select_template, line 47
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
Server time:	Mon, 15 Jun 2020 03:09:15 +0000


Step 38: To change the default login view ----- auth_views.LoginView.as_view(template_name='users/login.html')
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),***************************
    path('logout/',auth_views.LogoutView.as_view(),name='logout'),
    path('', include('blog.urls')),
]

Step 39: Create Login page

users---->template----->login.html

Note: set the login and logout href tag

Need An Account ? <a class="ml-2" href="{% url  'register' %}">Sign In</a>
Already Have An Account ? <a class="ml-2" href="{% url 'login' %}">Sign In</a>

Step 40: Try to loging with correct user id and password. django throws the below error. bcz its redirecting to login route
http://localhost:8000/accounts/profile/


Page not found (404)
Request Method:	GET
Request URL:	http://localhost:8000/accounts/profile/

Step 41: change the defauly loging redirect
django_projects---->settings.py

STATIC_URL = '/static/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'blog-home'


Step 41: To change the default logout view ----- path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout')
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout'),************************
    path('', include('blog.urls')),
]

Step 42: Create logout page

users---->template----->logout.html

Step 43: visual changes 

base.html

     <!-- Navbar Right Side -->
          <div class="navbar-nav">
            {% if user.is_authenticated %}**************************************************
            <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a>*******************
            {% else %}*********************************************************************
            <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>************************
            <a class="nav-item nav-link" href="{% url 'register' %}">Register</a>******************
            {% endif %}****************************************************************************
          </div>
		  
Step 44:Create the profile view
users---->views.py
def profile(request):
  return render(request,'users/profile.html')
  
  
Step 45: Create profile.html
users--->templates---->usres---->profile.html
{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}
<h1>{{ user.username }}</h1>  **********(Note:That user is not something that we actually have to pass in to the context that is something that is builtin to the django represent the current login user
{% endblock content %}


Step 46: Create url route for profile page
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
     path('profile/', user_views.profile, name = 'profile'),*********************************************
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout'),
    path('', include('blog.urls')),
]


Step 47: Import login_require decoretaor
users--->views.py

from django.shortcuts import render, redirect
#from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from .forms import UserRegisterForm
from django.contrib.auth.decorators import login_required *************

@login_required **********************
def profile(request):
  return render(request,'users/profile.html')


Step 48: Access the profile route

Request :localhost:8000/profile

Response :
http://localhost:8000/accounts/login/?next=/profile/

Page not found (404)
Request Method:	GET
Request URL:	http://localhost:8000/accounts/login/?next=/profile/
Using the URLconf defined in django_project.urls, Django tried these URL patterns, in this order:

admin/
register/ [name='register']
profile/ [name='profile']
login/ [name='login']
logout/ [name='logout']
[name='blog-home']
about/ [name='blog-about']
The current path, accounts/login/, didn't match any of these.

Step 49: go to settings.py
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'blog-home'

LOGIN_URL ='login' **********************


Step 50: Access the profile route

Request:localhost:8000/prfile

Response: http://localhost:8000/login/?next=/profile/ ************
after loging django automatically redirect to profile page. This is the built in feature django remember the url http://localhost:8000/login/?next=/profile/
so the user wont redirect to blog page.

(Part 8)
Step 50: Create Profile Models 
         from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Profile(models.Model):
  user = models.OneToOneField(User, on_delete=models.CASCADE)
  image = models.ImageField(default='default.jpg', upload_to='profile_pics')

  def __str__(self):
    return f'{self.user.username} Profile'


Step 51: run makemigrations cmd (Will get Pillow is not installed)
$ python manage.py makemigrations
SystemCheckError: System check identified some issues:

ERRORS:
users.Profile.image: (fields.E210) Cannot use ImageField because Pillow is not installed.
        HINT: Get Pillow at https://pypi.org/project/Pillow/ or run command "python -m pip install Pillow".
		
Step 52: pip install pillow

Step 53: run makemigrations cmd
python manage.py makemigrations

Step 54: run migrate cmd
python manage.py migrate

Step 55: Register the profile model in admin.py (app:user)

Step 56:  Go to admin page and upload image 
karthik---Upload image
TestUser ----Dont upload user

Step 56: Go to python shell

$ python manage.py shell
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from django.contrib.auth.models import User

In [2]: user = User.objects.filter(username='karthik').first()

In [3]: user
Out[3]: <User: karthik>

In [4]: user.profile
Out[4]: <Profile: karthik Profile>

In [5]: user.profile.image
Out[5]: <ImageFieldFile: profile_pics/ProfilePic.jpg>

In [6]: user.profile.image.width
Out[6]: 52


Step 57: Media Directry
MEDIA_ROOT ----> Media root is going tobe the full pathe where django to store upload image. For perfromance reasion this files are stored in file system not on database.
           ----->Media root is the folder where the uploaded files will be saved
		   
MEDIA_URL---->How we are going to access the image in the browser

MEDIA_ROOT = os.path.join(BASE_DIR,'media')---->BASE_DIR is a variable our django created at the top of the settings file that specify the loacation of the project base directory
MEDIA_URL='/media/'

Step 58: Delete the old profile and create new profile for (Karthik and TestUser)

Step 59: New media folder is created on project base directory
project base dir --->media--->profile_pics----->image.jpg

Step 60: Import static and settings

rom django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from users import views as user_views

from django.conf import settings ********************************
from django.conf.urls.static import static  *********************


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('profile/', user_views.profile, name = 'profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/',auth_views.LogoutView.as_view(template_name='users/logout.html'),name='logout'),
    path('', include('blog.urls')),
]

if settings.DEBUG:********************************************************************************
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) *****************
	
	
Step 60: Copy past the default.jpg in to Project base folder--->medi---->default.jpg
Note: Currenty we need to go to admin page and setup the profile for each user. We need to fix this

Step 61: Django Signals
Users--->signals.py
Create signals.py (write the below code)

from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile

@receiver(post_save,sender=User)
def create_profile(sender, instance, created, **kwargs):
  if created:
    Profile.objects.create(user=instance)

@receiver(post_save,sender=User)
def save_profile(sender, instance, **kwargs):
  instance.profile.save()
  
Step 61: Do the below step as per the django documentation users--->apps.py 
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'

    def ready(self):***********************
        import users.signals
		
		
(Part 9)
Step 62: Model Formatter
Model Form allows us to create a form that will work with a specific database model
Create below Two Forms. When ever we are going to put this form into a template it's going to look like just one form
1. UserUpdateForm
2. ProfileUpdateForm
*****************************************
class UserUpdateForm(forms.ModelForm):
    email=forms.EmailField()

    class Meta:
    model = User
    fields = ['username', 'email']

class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = Profile
        field = ['image']


*******************************************************

Step 63: Add these forms to views (Profile views)

from .forms import UserRegisterForm,UserUpdateForm,ProfileUpdateForm ****************

@login_required
def profile(request):
  u_form = UserUpdateForm()*******************
  p_form = ProfileUpdateForm()******************
  
  context = {****************************
    'u_form': u_form,****************
    'p_form': p_form ********************
  }
  return render(request,'users/profile.html',context)*************
  
Step 64: Update the profile.html template

{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}
<div class="content-section">
  <div class="media">
    <img class="rounded-circle account-img" src="{{ user.profile.image.url }}">
    <div class="media-body">
      <h2 class="account-heading">{{ user.username }}</h2>
      <p class="text-secondary">{{ user.email }}</p>
    </div>
  </div>
  <!-- FORM HERE -->
  **************************************************************************
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Profile Info</legend>
      {{ u_form|crispy}}
      {{ p_form|crispy}}
    </fieldset>
    <div class="form-group">
      <button class="btn-outline-info" type="submit">Update</button>
    </div>
  </form>
  ****************************************************************************
</div>
{% endblock content %}


(Part 10)
Step 65: Class Based View (List View, Detail View, Update View & Delete View)

Step 66: Create Class Base List View

from django.shortcuts import render
from django.views.generic import ListView *****************
from .models import Post

class PostListView(ListView): *******************
    model = Post ********************************
    
	
Step 67: Import the views into utl.py (Project Url)

from django.urls import path
from .views import PostListView
from . import views


#<app>/<mode>_<viewtype>.html
#blog/post_list.html
urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('about/', views.about, name='blog-about'),

]


Step 68: Launch the home page and it fail to load the template

http://localhost:8000/

Response 

TemplateDoesNotExist at /
blog/post_list.html ****************************************************
Request Method:	GET
Request URL:	http://localhost:8000/
Django Version:	3.0.5
Exception Type:	TemplateDoesNotExist
Exception Value:	
blog/post_list.html

By defaults class-based views look for templates of cretail naming pattern. So that we can see here that it is looking for blog/post_list.html (#<app>/<mode>_<viewtype>.html)

 (#<app>/<mode>_<viewtype>.html)
 app--->blog
 model --->post
 viewtype---->list
 
 All together it was looking for "blog/post_list.html". So we could create a template with naming convention and it see the template
 But we also change which template that we want this view to use and since we already have the template for our home view lets's use it
 
from django.shortcuts import render
from django.views.generic import ListView 
from .models import Post

class PostListView(ListView):
    model = Post 
	template_name = 'blog/home.html' *************************

Step 69: Even with this change in place this isn't going to work for us just yet. Bcz it doesn't know what we want the variable to be named in out template
that we're going to be looping over so for example if we lookup here in our home view function we called all of our post objects 'post' in our context.
But default our list view is going to call that variable object list instead of 'post'. so we can either go into our template and change it so that it's looping over object list.
or we can set one more variable in out list view and let the class know we want that variable tobe called post instead. Since we already have the template created let's  just go ahed and set 
this variable here within our list views.

def home(request):
    context = {
        'posts': Post.objects.all()  [ Key note: ********post == object list]
    }
    print('Home Page!')
    return render(request, 'blog/home.html', context)
	
	
So to change that we can set an attribute here

class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  #<app>/<model>_<viewtype>.html
    context_object_name='posts' ****************************************************
	
Step 70: Now the home page will be loaded properly

http://localhost:8000/

Note one small change. The latest post is displayed at the bottom. Let make the changes
 
Step 71: Add the ordering attribute

class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  #<app>/<model>_<viewtype>.html
    context_object_name = 'posts'
    ordering =['-date_posted'] *****************************
	
Step 72: List View Vs Function View 

what is the differences?

def home(request):
    context = {
        'posts': Post.objects.all()
    }
    print('Home Page!')
    return render(request, 'blog/home.html', context)
	
	
	
class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  #<app>/<model>_<viewtype>.html
    context_object_name = 'posts'
    ordering =['-date_posted']
	
we are not saving any lines of code. But in class base view we are setting variable and in our function view we had to render a function and explicitly pass in that information.
Now we could have save some lines of code if we had used generic view default. soif i had created a template with the naming convention that our list view was looking for and use the variable name of object list 
inside of our template as opposed to post like we're using here then really the only line of code we would have to set is the model and also the ordeting if we wanted the 


Step 73: Detail Post View

from django.shortcuts import render
from django.views.generic import ListView, DetailView  *******
from .models import Post

class PostDetailView(DetailView): *********************
    model = Post				  *********************		


Step 74: Import Views into URL

from django.urls import path
from .views import (
    PostListView,
    PostDetailView,
    PostCreateView) *************
from . import views

#<app>/<mode>_<viewtype>.html
#blog/post_list.html
urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('post/<int:pk>/', PostDetailView.as_view(), name='post-detail'),
    path('post/new/', PostCreateView.as_view(), name='post-create'),
    path('about/', views.about, name='blog-about'),

]

Step 75: Templates
we know we need a template for this view but it might not be named what you think it's going to be named so for.
For Example : detail view it was post_detail.html 

But we can't named as post_create. bcz update view that we're going to be creating and a little bit so they actually expect this template to be the name of the model followed by underscore form
blog--->template---->blog----->post_form.html

{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}
<div class="content-section">
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Blog Post</legend>
      {{ form|crispy}} *********************************************Our create view actually expects the form to be called 'form' so we can leave that as it is.
    </fieldset>
    <div class="form-group">
      <button class="btn-outline-info" type="submit">Post</button>
    </div>
  </form>

</div>
{% endblock content %}

Step 76:
Basicaly this is saying hey that forum that you are trying to submit before you do that take that instance and set the author equal to the current logedin user.
Once we do that we can validate the form.

Step 77:
Create a new post but it will not work
http://localhost:8000/post/new/

Response:
ImproperlyConfigured at /post/new/

No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model. ***********************************

Request Method:	POST
Request URL:	http://localhost:8000/post/new/
Django Version:	3.0.5
Exception Type:	ImproperlyConfigured
Exception Value:	
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\views\generic\edit.py in get_success_url, line 118
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
 
Step 78:
 
 Basically the above message says it created the post succesfully but it don't know where we want to be redirect.
 
We need to let the view know where we want to redirect once we created the post. Now idealy we would just redirect to the detail page of the post just we created and that's actually what it tries to do.
But it just doesn't know how to get there so we have to tell it and it said this on the error page. But the way to tell the django  how to find the 
url of a model object ***********************
is to create a get absolute URL method in our model that returns the path to any specific instance. 

Rediredt Vs Revert

Redirect --> will actually redirect you to a specific rout
Reverse ---> will simply return the full URL to that route as a string

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from django.urls import reverse

  def get_absolute_url(self): *************************************
    return reverse('post-detail',kwargs={'pk':self.pk})


Note: If you want to go to Home page instead of specific post page then you could set an attribute  in a create view called success URL and just set that to the home page instead


Step 79: Import LoginRequiredMixin
It allows us to loging to create a post. You can not create a post without login

class PostCreateView(LoginRequiredMixin,CreateView): *********************
    model = Post
    fields = ['title', 'content']
    
    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)
		
Step 80: Import UserPassesTestMixin
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin

class PostUpdateView(LoginRequiredMixin,UserPassesTestMixin,UpdateView): ******************
    model = Post
    fields = ['title', 'content']
    
    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

    def test_func(self):*******************************
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False
		
Step 81: Delete Post
class PostDeleteView(LoginRequiredMixin,UserPassesTestMixin,DeleteView):
    model = Post

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False
		
Step 82: when you delete the post will get the below error
ImproperlyConfigured at /post/6/delete/
No URL to redirect to. Provide a success_url.
Request Method:	POST
Request URL:	http://localhost:8000/post/6/delete/
Django Version:	3.0.5
Exception Type:	ImproperlyConfigured
Exception Value:	
No URL to redirect to. Provide a success_url.
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\views\generic\edit.py in get_success_url, line 224
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
Server time:	Mon, 22 Jun 2020 03:44:56 +0000


Part 11
Step 83: Pagination
open python shell
Load the dummy post using python shell
close python shell
post.json

Step 84: Login to the application and see all the dummy post are loaded

Step 85: working with paginator object
open python shell

In [1]: from django.core.paginator import Paginator
In [3]: posts = ['1','2','3','4','5']
In [4]: p=Paginator(posts,2)
In [5]: p.num_pages
Out[5]: 3

In [8]: for page in p.page_range:
   ...:     print(page)
   ...: 
   ...: 
1
2
3

In [9]: p1 = p.page(1)

In [10]: p1
Out[10]: <Page 1 of 3>

In [12]: p1.has_previous()
Out[12]: Fals

In [13]: p1.has_next()
Out[13]: True

In [15]: p1.next_page_number()
Out[15]: 2


exit()

Step 86: Add the variable paginage_by

class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  #<app>/<model>_<viewtype>.html
    context_object_name = 'posts'
    ordering = ['-date_posted']
    paginate_by=2
	
Step 87: Just load the home page. Now we can see only two post per page. But we dont have other links to the page. Something to fix that but we can actually hard code 
the page request into the URL to get the other pages right now. So if i go up to the URL bar type the /?page=2 and run that the URL query parameter of the page equal got passed to out view and then our view handle that 
and gave us the second page
http://localhost:8000/?page=2

Step 87: Go to home.html


Part 12
Step 88: Email & Password Reset

Create the password reset rout 


urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('profile/', user_views.profile, name = 'profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/', auth_views.LogoutView.as_view(template_name = 'users/logout.html'), name = 'logout'),
    path('password-reset/', auth_views.PasswordResetView.as_view(template_name = 'users/password_reset.html'), name = 'password_reset'),***********************
    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(template_name = 'users/password_reset_done.html'), name = 'password_reset_done'), *****************
    path('', include('blog.urls')),
]

Part 89: Create the Html templates

password_reset.html
password_reset_done.html

Path 90: Launch the password reset page
Request :

localhost:8000/password-reset/

Response :

NoReverseMatch at /password-reset/
Reverse for 'password_reset_confirm' not found. 'password_reset_confirm' is not a valid view function or pattern name. *******************************
Request Method:	POST
Request URL:	http://localhost:8000/password-reset/
Django Version:	3.0.5
Exception Type:	NoReverseMatch
Exception Value:	
Reverse for 'password_reset_confirm' not found. 'password_reset_confirm' is not a valid view function or pattern name.
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\urls\resolvers.py in _reverse_with_prefix, line 677
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
Server time:	Thu, 25 Jun 2020 02:24:33 +0000
Error during template rendering
In template C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django-3.0.5-py3.8.egg\django\contrib\admin\templates\registration\password_reset_email.html, error at line 6 ***********************

Reverse for 'password_reset_confirm' not found. 'password_reset_confirm' is not a valid view function or pattern name.
1	{% load i18n %}{% autoescape off %}
2	{% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %}
3	
4	{% trans "Please go to the following page and choose a new password:" %}
5	{% block reset_link %}
6	{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} *******************************************
7	{% endblock %}
8	{% trans 'Your username, in case you’ve forgotten:' %} {{ user.get_username }}
9	
10	{% trans "Thanks for using our site!" %}
11	
12	{% blocktrans %}The {{ site_name }} team{% endblocktrans %}
13	
14	{% endautoescape %}
15	
Step  90: Create the url patter for password-reset/done/ and password-reset-confirm

urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', user_views.register, name = 'register'),
    path('profile/', user_views.profile, name = 'profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name = 'login'),
    path('logout/', auth_views.LogoutView.as_view(template_name = 'users/logout.html'), name = 'logout'),
    path('password-reset/', auth_views.PasswordResetView.as_view(template_name = 'users/password_reset.html'), name = 'password_reset'),***********************
    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(template_name = 'users/password_reset_done.html'), name = 'password_reset_done'), *****************
    path('password-reset-confirm/<uidb64>/<token>',auth_views.PasswordResetConfirmView.as_view(template_name='users/password_reset_confirm.html'),name='password_reset_confirm'), *******************
    path('', include('blog.urls')),
]


Step 91: Create the html template

password_reset_confirm
password_reset_done

Step 92: Access the Url

request
http://localhost:8000/password-reset/


Response 

ConnectionRefusedError at /password-reset/
[WinError 10061] No connection could be made because the target machine actively refused it
Request Method:	POST
Request URL:	http://localhost:8000/password-reset/
Django Version:	3.0.5
Exception Type:	ConnectionRefusedError
Exception Value:	
[WinError 10061] No connection could be made because the target machine actively refused it
Exception Location:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\lib\socket.py in create_connection, line 796
Python Executable:	C:\Users\lkart\AppData\Local\Programs\Python\Python38-32\python.exe
Python Version:	3.8.2
Python Path:	
['C:\\Karthik\\Django_Desktop\\django_project',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\python38.zip',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\DLLs',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32',
 'C:\\Users\\lkart\\AppData\\Roaming\\Python\\Python38\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\django-3.0.5-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\sqlparse-0.3.1-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\asgiref-3.2.7-py3.8.egg',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\win32\\lib',
 'C:\\Users\\lkart\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\Pythonwin']
Server time:	Thu, 25 Jun 2020 02:52:14 +0000

Step 93:









		

 






	


  


















	

		 
